First, create a new directory for your Helm chart, let's call it 'my-app-chart'.

Inside the 'my-app-chart' directory, create the following files:

1-'Chart.yaml': This file contains metadata about the Helm chart.

"apiVersion: v2
name: my-app
version: 0.1.0
description: A Helm chart for deploying my Node.js or Laravel application"
-------------------------------------------------------------------------------------------------------------------
2-'values.yaml': This file contains configurable values for the Helm chart.

"
replicaCount: 1
image:
  repository: my-app
  tag: latest
  pullPolicy: IfNotPresent
service:
  type: ClusterIP
  port: 80
ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: my-app.local
      paths: ["/"]
  tls: []
"
---------------------------------------------------------------------------------------------------------------------
3- 'deployment.yaml': This file defines the Kubernetes deployment for the application.

"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-app.fullname" . }}
  labels:
    app: {{ include "my-app.name" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "my-app.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "my-app.name" . }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3000 # Change to the appropriate port for your application
"
---------------------------------------------------------------------------------------------------------------------
4-'service.yaml': This file defines the Kubernetes service for the application.

apiVersion: v1
kind: Service
metadata:
  name: {{ include "my-app.fullname" . }}
  labels:
    app: {{ include "my-app.name" . }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: 3000 # Change to the appropriate port for your application
      protocol: TCP
  selector:
    app: {{ include "my-app.name" . }}
---------------------------------------------------------------------------------------------------------------------
5-'ingress.yaml': This file defines the Kubernetes ingress for the application (optional).

{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "my-app.fullname" . }}
  annotations:
    {{- toYaml .Values.ingress.annotations | nindent 4 }}
spec:
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ . }}
            pathType: Prefix
            backend:
              service:
                name: {{ include "my-app.fullname" . }}
                port:
                  number: {{ $.Values.service.port }}
          {{- end }}
    {{- end }}
  tls:
    {{- with .Values.ingress.tls }}
    - hosts:
        {{- range . }}
        - {{ .host }}
        {{- end }}
      secretName: {{ include "my-app.fullname" . }}-tls
    {{- end }}
{{- end }}


------------------------------------------------------------------------------------------------------------------
With these files in place, you can now package and install the Helm chart.

To package the Helm chart, run the following command from the my-app-chart directory

'helm package .'

-----------------------------------------------------------------------------------------------------------------
To install the Helm chart, run the following command:
'helm install my-app ./my-app-chart-0.1.0.tgz'

----------------------------------------------------------------------------------------------------------------
You can customize the values in the values.yaml file according to your application's requirements.

Note: The above chart assumes that you have a Docker image named my-app with the appropriate tag available in your container registry.
You may need to modify the image.
repository and image.tag values in the values.yaml file to match your actual image.

